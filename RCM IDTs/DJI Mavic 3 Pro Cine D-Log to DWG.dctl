// Written by Thatcher Freeman
// clang-format off
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

// clang-format on

__DEVICE__ float mavic_3_pro_cine_dlog_to_linear(float x) {
    // Based on clips shot on Mavic 3 Pro Cine, wide lens in D-Log
    // Maps 40% IRE to 18% gray.

    const float base = 6359.82080078125;
    const float offset = -0.023448413237929344;
    const float scale = 0.012251190841197968;
    const float slope = 0.37293991446495056;
    const float intercept = -0.03391782194375992;
    const float cut = 0.14208984375;

    float out;
    if (x < cut) {
        out = slope * x + intercept;
    } else {
        out = _powf(base, x) * scale + offset;
    }
    out *= 0.18 / 0.38352;
    return out;
}

__DEVICE__ float linear_to_di(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb =
        make_float3(mavic_3_pro_cine_dlog_to_linear(p_R), mavic_3_pro_cine_dlog_to_linear(p_G), mavic_3_pro_cine_dlog_to_linear(p_B));

    // Estimated xyY RGBW Primaries:
    // RGBW: [[0.73323846 0.25560863 1.        ]] [[0.12236253 0.80596119 1.        ]] [[ 0.18240113 -0.03413258  1.        ]] [[0.3127
    // 0.329  1.    ]]
    float matrix[3][3] = {
        {0.86294021, -0.05322212, 0.19028191},
        {-0.01584619, 0.99052004, 0.02532615},
        {0.06974914, 0.15457271, 0.77567815},
    };

    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out = make_float3(0.0, 0.0, 0.0);
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_di(rgb2.x), linear_to_di(rgb2.y), linear_to_di(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
