// Written by Thatcher Freeman
// clang-format off
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

// clang-format on

__DEVICE__ float mavic_2_dlogm_to_linear(float x) {
    // Based on clips shot by a DJI Mavic 2 Pro
    const float base = 92.6781997680664;
    const float offset = -0.6966880559921265;
    const float scale = 0.7584498524665833;
    const float slope = 7.540504455566406;
    const float intercept = -0.3407900035381317;
    const float cut = 0.17297913134098053;

    float out;
    if (x < cut) {
        out = slope * x + intercept;
    } else {
        out = _powf(base, x) * scale + offset;
    }
    return out;
}

__DEVICE__ float linear_to_di(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(mavic_2_dlogm_to_linear(p_R), mavic_2_dlogm_to_linear(p_G), mavic_2_dlogm_to_linear(p_B));
    // Maps 40% IRE to 18% gray.
    const float gain = 0.18 / 3.94545;
    rgb *= gain;

    // Estimated xyY Primaries:
    // RGBW:  [[0.7152964  0.29517943 1.        ]] [[0.146036   0.84880181 1.        ]] [[ 0.15723694 -0.04065428  1.        ]] [[0.3127
    // 0.329  1.    ]]
    float matrix[3][3] = {
        {0.86841259, -0.01703232, 0.14861973},
        {0.03030153, 0.93193003, 0.03776844},
        {0.06112896, 0.09929524, 0.83957581},
    };

    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out = make_float3(0.0, 0.0, 0.0);
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_di(rgb2.x), linear_to_di(rgb2.y), linear_to_di(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
