// Written by Thatcher Freeman
// Based on clips shot by a DJI Mavic 2

DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

__DEVICE__ float dlogm_to_linear(float x) {
    const float base = 108.11405181884766;
    const float offset = -0.025329161435365677;
    const float scale = 0.031597670167684555;
    const float slope = 0.3532363474369049;
    const float intercept = -0.015529380179941654;
    const float cut = 0.18580546975135803;

    if (x < cut) {
        return slope * x + intercept;
    } else {
        return _powf(base, x) * scale + offset;
    }
}

__DEVICE__ float linear_to_dwg(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(dlogm_to_linear(p_R), dlogm_to_linear(p_G), dlogm_to_linear(p_B));

    // Estimated xyY Primaries:
    // rgbw: [[0.70813794 0.31859356 1.        ]] [[0.22892959 0.79814514 1.        ]] [[ 0.09233793 -0.04618938  1.        ]] [[0.3127 0.329  1.    ]]
    float matrix[3][3] =  {
        {0.86139119, 0.12324888, 0.01535994},
        {0.05647680, 0.86463301, 0.07889020},
        {0.05259304, 0.07923069, 0.86817627},
    };
    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out = make_float3(0.0, 0.0, 0.0);
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_dwg(rgb2.x), linear_to_dwg(rgb2.y), linear_to_dwg(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
