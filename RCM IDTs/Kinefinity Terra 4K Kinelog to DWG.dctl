
// Written by Thatcher Freeman
// Based on clips shot on Terra 4k
// clang-format off
DEFINE_UI_PARAMS(input_tone_curve, Input Transfer Function, DCTLUI_COMBO_BOX, 0, {INPUT_KINELOG, INPUT_LINEAR}, {KineLog, Linear})
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

// clang-format on

__DEVICE__ float terra_4k_kinelog_to_linear(float x) {
    const float base = 3607.57568359375;
    const float offset = -0.015968460589647293;
    const float scale = 0.007402670104056597;
    const float slope = 0.07792457193136215;
    const float intercept = -0.0071669695898890495;
    const float cut = 0.09656248241662979;

    if (x < cut) {
        return slope * x + intercept;
    } else {
        return _powf(base, x) * scale + offset;
    }
}

__DEVICE__ float linear_to_di(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {

    float3 rgb;
    if (input_tone_curve == INPUT_KINELOG) {
        rgb = make_float3(terra_4k_kinelog_to_linear(p_R), terra_4k_kinelog_to_linear(p_G), terra_4k_kinelog_to_linear(p_B));
    } else if (input_tone_curve == INPUT_LINEAR) {
        rgb = make_float3(p_R, p_G, p_B);
    }

    // Estimated from colorchecker 24 in daylight.
    // Estimated xyY RGBW primaries:
    // [[0.69586264 0.17941886 1.        ]] [[0.23608622 1.45120862 1.        ]] [[ 0.09763486 -0.13271045  1.        ]] [[0.3127 0.329  1.    ]]
    float matrix[3][3] = {
        { 0.9175826,   0.03555074,  0.04686666},
        {-0.07178172,  1.11461629, -0.04283457},
        { 0.14850592, -0.24569077,  1.09718485},
    };

    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out = make_float3(0.0, 0.0, 0.0);
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_di(rgb2.x), linear_to_di(rgb2.y), linear_to_di(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
