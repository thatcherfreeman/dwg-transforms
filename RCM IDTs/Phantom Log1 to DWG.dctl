// Written by Thatcher Freeman
// Based on the official data sheet.
// clang-format off
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

// clang-format on

__DEVICE__ float linear_to_phantom_log1(float x) {
    const float a = 0.182f;
    const float b = 30.0f;
    const float c = 0.011375f;
    const float d = 0.0f;
    const float e = 0.377675f;
    const float s = 16.0f;

    float out;
    if (x < c) {
        out = s * x;
    } else {
        out = a * _logf(b * x + d) + e;
    }
    return out;
}

__DEVICE__ float phantom_log1_to_linear(float x) {
    const float a = 0.182f;
    const float b = 30.0f;
    const float c = 0.011375f;
    const float d = 0.0f;
    const float e = 0.377675f;
    const float s = 16.0f;

    float out;
    if (x < s * c) {
        out = x / s;
    } else {
        out = (_expf((x - e) / a) - d) / b;
    }
    return out;
}

__DEVICE__ float linear_to_di(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(phantom_log1_to_linear(p_R), phantom_log1_to_linear(p_G), phantom_log1_to_linear(p_B));
    // Gain gained to match the old dctl, approximately matching the rec709 decode.
    const float gain = _exp2f(1.55f);
    rgb *= gain;

    // Assumed Rec709 primaries
    float matrix[3][3] = {
        {0.56276746f, 0.32351659f, 0.11371596f},
        {0.07775464f, 0.74957735f, 0.17266802f},
        {0.0646692f, 0.19199869f, 0.74333211f},
    };
    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out;
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_di(rgb2.x), linear_to_di(rgb2.y), linear_to_di(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
