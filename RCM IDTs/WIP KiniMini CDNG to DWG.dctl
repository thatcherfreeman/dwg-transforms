// Written by Thatcher Freeman
// Based on clips shot by a KiniMini 4k.

// Decode the clips at a project level with the following settings:
// "Apply Pre Tone Curve" UNCHECKED
// "Apply Soft Clip" UNCHECKED
// Color Science: Camera Metadata
// White Balance: As shot
// Color Space: Blackmagic Design
// Gamma: Blackmagic Design Film
// All sliders set to 0.0.

// clang-format off
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

// clang-format on

__DEVICE__ float blackmagic_film_to_linear(float x) {
    const float base = 213.42864990234375;
    const float offset = -0.13013190031051636;
    const float scale = 0.10866688936948776;
    const float slope = 0.8058837056159973;
    const float intercept = -0.02851923741400242;
    const float cut = 0.06514445692300797;

    if (x < cut) {
        return slope * x + intercept;
    } else {
        return _powf(base, x) * scale + offset;
    }
}

__DEVICE__ float linear_to_di(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(blackmagic_film_to_linear(p_R), blackmagic_film_to_linear(p_G), blackmagic_film_to_linear(p_B));

    // Estimated xyY Primaries:
    // Assumed Primaries: [[0.72533342 0.23229313 1.        ]] [[0.07637356 1.1886415  1.        ]] [[ 0.11865626 -0.2425359   1. ]]
    // [[0.3127 0.329  1.    ]]
    float matrix[3][3] = {
        {1.06230962, -0.15662533, 0.09431571},
        {-0.04039881, 1.22449715, -0.18409834},
        {0.10809560, -0.05845818, 0.95036258},
    };
    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out = make_float3(0.0, 0.0, 0.0);
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_di(rgb2.x), linear_to_di(rgb2.y), linear_to_di(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
