// Written by Thatcher Freeman
// Fit to GoPro 13 Footage shot by Kaur
// clang-format off
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

// clang-format on

__DEVICE__ float gplog_to_linear(float x) {
    const float base = 368.58819580078125f;
    const float offset = -0.9869849681854248f;
    const float scale = 0.07249391078948975f;
    const float mid_gray_scaling = 0.18f / 1.2622f;

    float out = scale * (_powf(base, x) + offset);
    out *= mid_gray_scaling;
    return out;

    // Reference gplog implementation, not a good fit
    // return (_powf(113.0, x) - 1.0) / 112.0;
}

__DEVICE__ float linear_to_di(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(gplog_to_linear(p_R), gplog_to_linear(p_G), gplog_to_linear(p_B));

    // Primaries fit to color checker in daylight.
    // Estimated Gamut Primaries:  [[0.74921177 0.20684676 1.        ]] [[0.2982658  1.43791405 1.        ]] [[ 0.10166355 -0.06446715  1.
    // ]] [[0.3127 0.329  1.    ]]

    float matrix[3][3] = {
        {0.84909171f, 0.10174351f, 0.04916478f},
        {-0.06480037f, 1.0003319f, 0.06446847f},
        {0.08289321f, -0.25090356f, 1.16801036f},
    };
    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out = make_float3(0.0f, 0.0f, 0.0f);
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_di(rgb2.x), linear_to_di(rgb2.y), linear_to_di(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
