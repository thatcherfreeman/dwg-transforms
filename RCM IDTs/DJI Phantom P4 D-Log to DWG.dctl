// Written by Thatcher Freeman
// Based clips shot on a DJI Phantom P4
// clang-format off
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

// clang-format on

__DEVICE__ float dlog_to_linear(float x) {
    const float base = 1001.4365844726562f;
    const float offset = 1.395376443862915f;
    const float scale = 0.6393237709999084f;
    const float slope = 29.36385154724121f;
    const float intercept = -2.405184268951416f;
    const float cut = 0.2740863561630249f;

    float out;
    if (x < cut) {
        out = slope * x + intercept;
    } else {
        out = _powf(base, x) * scale + offset;
    }
    return out;
}

__DEVICE__ float linear_to_di(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(dlog_to_linear(p_R), dlog_to_linear(p_G), dlog_to_linear(p_B));
    // Assuming code value of 0.50 corresponds to mid gray.
    const float gain = 0.18f / 21.62708f;
    rgb *= gain;

    // Primaries estimated from shot of a colorchecker classic and colorchecker passport video:
    // [[0.74631119 0.29742087 1.        ]] [[0.24726439 0.62688006 1.        ]] [[ 0.12542201 -0.04435665  1.        ]] [[0.3127 0.329  1.
    // ]]
    float matrix[3][3] = {
        {0.68548224f, 0.24483911f, 0.06967865f},
        {0.01142579f, 0.94028723f, 0.04828699f},
        {0.03091288f, 0.24512543f, 0.7239617f},
    };
    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out = make_float3(0.0f, 0.0f, 0.0f);
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_di(rgb2.x), linear_to_di(rgb2.y), linear_to_di(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
