
// Written by Thatcher Freeman
// Based on the documentation of the KineLog3 Curve.
// https://kinefinity.com/kinelog3-technical-specifications/
// clang-format off
DEFINE_UI_PARAMS(input_tone_curve, Input Transfer Function, DCTLUI_COMBO_BOX, 0, {INPUT_KINELOG3, INPUT_LINEAR}, {KineLog3, Linear})
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

// clang-format on

__DEVICE__ float kinelog3_to_linear(float x) {
    const float a = 66.64f;
    const float b = 0.296f;
    const float c = 0.907136f;
    const float d = 0.092864f;
    const float cut = -0.008239f;
    const float s = 0.017178f;

    float out;
    if (x < 0.0f) {
        out = x * s + cut;
    } else {
        out = (_exp10f(((x - d) / b) / c) - 1.0f) / a;
    }
    return out;
}

__DEVICE__ float linear_to_kinelog3(float x) {
    const float a = 66.64f;
    const float b = 0.296f;
    const float c = 0.907136f;
    const float d = 0.092864f;
    const float cut = -0.008239f;
    const float s = 0.017178f;

    float out;
    if (x < cut) {
        out = (x - cut) / s;
    } else {
        out = _log10f((a * x) + 1.0f) * b * c + d;
    }
    return out;
}

__DEVICE__ float linear_to_di(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {

    float3 rgb;
    if (input_tone_curve == INPUT_KINELOG3) {
        rgb = make_float3(kinelog3_to_linear(p_R), kinelog3_to_linear(p_G), kinelog3_to_linear(p_B));
    } else if (input_tone_curve == INPUT_LINEAR) {
        rgb = make_float3(p_R, p_G, p_B);
    }

    float matrix[3][3] = {
        {0.9819431399f, 0.0506335021f, -0.0325766421f},
        {-0.0579457019f, 1.1842713026f, -0.1263256007f},
        {0.0773258942f, -0.1267966898f, 1.0494707956f},
    };

    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out = make_float3(0.0f, 0.0f, 0.0f);
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_di(rgb2.x), linear_to_di(rgb2.y), linear_to_di(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
