// Written by Thatcher Freeman
// Based on a spec sheet provided by Filmic

DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

__DEVICE__ inline float dot_product(float3 a, float3 b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

// if c = mix(a, b, t), then a = unmixf(b, c, t) and b = unmixf(a, c, (1-t))
__DEVICE__ float unmixf(float b, float c, float t) {
    if (t == 1) {
        return 0;
    } else {
        return (c - b * t) / (1 - t);
    }
}

__DEVICE__ inline float3 unmixf3(float3 b, float3 c, float t) {
    float3 output = make_float3(unmixf(b.x, c.x, t), unmixf(b.y, c.y, t), unmixf(b.z, c.z, t));
    return output;
}

__DEVICE__ float logv3_to_linear(float invec) {
    // This function is based on the official documentation but it
    // is not a true inverse of the linear_to_logv3 function.
    float u = _exp2f((invec / 0.125) - 8.0);
    float x = 1.1612159730893894;
    float y = 0.6090138106343165;
    float out = _powf(u, _mix(x, y, invec));
    return out;
}

__DEVICE__ float interpolate(float x, float low, float high) {
    // if x < low, return 0.0, if x > high return 1.0,
    // then linearly interpolate between
    return _saturatef((x - low) / (high - low));
}

__DEVICE__ float logv3_to_linear_approx(float y) {
    // Inverse of a piece-wise approximation of the lin2logv3
    // because the lin2log function is not algebraically invertible.
    const float gamma = 0.27698768;
    const float log_cutoff = 0.55;
    const float smoothing = 0.05;
    float exp_portion = _exp2f(((y * 9.0 / 8.0) - 1.0) * 8.0);
    float pow_portion = _powf(y, 1.0 / gamma);
    // Interpolate because the two pieces don't quite meet at a single point.
    float interp = interpolate(y, log_cutoff - smoothing, log_cutoff + smoothing);
    float output = pow_portion * interp + (1.0 - interp) * exp_portion;
    return output;
}

__DEVICE__ float3 resaturate(float3 invec) {
    // Inverse of the nonlinear desaturation function applied by
    // filmic prior to converting lin to log.
    float p = dot_product(invec, make_float3(0.2126, 0.7152, 0.0722));
    float3 monochrome = make_float3(p, p, p);
    float o = 0.16667 * _logf(p) + 1.0;
    float3 output = unmixf3(monochrome, invec, 1.0 - o);
    return output;
}

__DEVICE__ float linear_to_dwg(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(logv3_to_linear_approx(p_R), logv3_to_linear_approx(p_G), logv3_to_linear_approx(p_B));
    rgb = resaturate(rgb);

    // Assumed Rec709 primaries
    float matrix[3][3] = {
        {0.56276746, 0.32351659, 0.11371596},
        {0.07775464, 0.74957735, 0.17266802},
        {0.0646692, 0.19199869, 0.74333211},
    };
    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out;
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_dwg(rgb2.x), linear_to_dwg(rgb2.y), linear_to_dwg(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
