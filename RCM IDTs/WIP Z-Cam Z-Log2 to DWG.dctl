// Written by Thatcher Freeman
// Based on clips shot on a Z-Cam E2 F6 and an E2 OG.

DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

__DEVICE__ float zlog2_to_linear(float x) {
    // zlog2 to linear fit from clips from the E2 and the F6.
    const float base = 883.01708984375;
    const float offset = -0.2871415317058563;
    const float scale = 0.09746987372636795;
    const float slope = 2.7828056812286377;
    const float intercept = -0.46649909019470215;
    const float cut = 0.212049663066864;

    if (x < cut) {
        return slope * x + intercept;
    } else {
        return _powf(base, x) * scale + offset;
    }
}

__DEVICE__ float linear_to_zlog2(float x) {
    // Inverse of zlog2 to linear
    const float base = 883.01708984375;
    const float offset = -0.2871415317058563;
    const float scale = 0.09746987372636795;
    const float slope = 2.7828056812286377;
    const float intercept = -0.46649909019470215;
    const float cut = 0.212049663066864;

    if (x < slope * cut + intercept) {
        return (x - intercept) / slope;
    } else {
        return _logf((x - offset) / scale) / _logf(base);
    }
}

__DEVICE__ float linear_to_dwg(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(zlog2_to_linear(p_R), zlog2_to_linear(p_G), zlog2_to_linear(p_B));
    // Gain needed to set 45 IRE in zlog2 to 0.18 after the fitted curve.
    const float gain = 0.1013439;
    rgb *= gain;

    // Fit from six color charts, four on E2 and two on F6, assumed all were after-2014 macbeth charts.
    float matrix[3][3] = {
        // Estimated primaries:
        // [[0.70860151 0.21437267 1.        ]] [[0.28116174 1.13839124 1.        ]] [[ 0.05915039 -0.1454884   1.        ]] [[0.3127 0.329  1.    ]]
        { 0.89040955,  0.14661782, -0.03702737},
        {-0.04234254,  1.06735713, -0.02501459},
        { 0.11362284, -0.15476861,  1.04114577},
    };
    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out;
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_dwg(rgb2.x), linear_to_dwg(rgb2.y), linear_to_dwg(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
