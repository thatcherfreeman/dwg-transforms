DEFINE_UI_PARAMS(no_log, Skip Log Encoding, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(skip_matrix, Skip Matrix, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(color_profile_input, Profile, DCTLUI_COMBO_BOX, 0, { FLAT, COLOR }, { Flat Profile, Color Profile })

__DEVICE__ inline float protune_to_linear(float t)
{
    // Protune function taken from https://nick-shaw.github.io/cinematiccolor/common-rgb-color-spaces.html
    return (_powf(113.0, t) - 1.0) / 112.0;
}

__DEVICE__ inline float linear_to_dwg(float x)
{
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

// Used values calculated from http://color.support/colorspacecalculator.html
// Native color primaries taken from https://nick-shaw.github.io/cinematiccolor/common-rgb-color-spaces.html
__CONSTANT__ float matrix[9] = {
     0.711228,  0.234219,  0.054553,
    -0.046155,  0.948576,  0.097580,
     0.107143, -0.121310,  1.014166,
};

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float r = protune_to_linear(p_R);
    float g = protune_to_linear(p_G);
    float b = protune_to_linear(p_B);

    if (color_profile_input == COLOR) {
        // Convert to flat profile via a gamma adjustment
        r = _powf(r, 0.75);
        g = _powf(g, 0.75);
        b = _powf(b, 0.75);
    } else if (color_profile_input == FLAT) {
        // Do nothing, assume Flat is linear.
    }

    float r2 = r;
    float g2 = g;
    float b2 = b;
    if (!skip_matrix) {
        r2 = ( matrix[0] * r) + ( matrix[1] * g) + ( matrix[2] * b);
        g2 = ( matrix[3] * r) + ( matrix[4] * g) + ( matrix[5] * b);
        b2 = ( matrix[6] * r) + ( matrix[7] * g) + ( matrix[8] * b);
    }

    // TODO: Apply an appropriate gain to the r2/g2/b2 values so that middle gray is maintained.
    float3 res = make_float3(r2, g2, b2);
    if (!no_log) {
        float r3 = linear_to_dwg(r2);
        float g3 = linear_to_dwg(g2);
        float b3 = linear_to_dwg(b2);
        res = to_float3(r3, g3, b3);
    }
    return res;
}