// Written by Thatcher Freeman
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

__DEVICE__ inline void copy_matrix(float src[3][3], float dst[3][3]) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            dst[i][j] = src[i][j];
        }
    }
}

__DEVICE__ float mavic_3_pro_dlogm_to_linear(float x) {
    // Based on clips shot on Mavic 3 Pro, wide lens in D-Log M
    // Maps 40% IRE to 18% gray.
    const float x_shift = -0.736169159412384;
    const float y_shift = -0.9837290048599243;
    const float scale = 7.4200921058654785;
    const float slope = 0.4385978579521179;
    const float intercept = 0.09801799058914185;
    const float cut = 0.1745949685573578;

    float tmp = _powf(2.0, x * scale + y_shift) + x_shift;
    float out;
    if (tmp < cut) {
        out = tmp * slope + intercept;
    } else {
        out = tmp;
    }
    out *= 0.0558909009613;
    return out;
}

__DEVICE__ float linear_to_dwg(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(
            mavic_3_pro_dlogm_to_linear(p_R), mavic_3_pro_dlogm_to_linear(p_G), mavic_3_pro_dlogm_to_linear(p_B));

    // Estimated xyY RGBW Primaries:
    // Honestly not far from rec709
    // rgbw: [[0.69644137 0.30997671 1.        ]] [[0.25352098 0.6715864  1.        ]] [[0.18932426 0.05379236 1.        ]] [[0.3127 0.329  1.    ]]
    float matrix [3][3] = {
        {0.58153814, 0.20390556, 0.21455631},
        {0.03777275, 0.81320261, 0.14902464},
        {0.04443076, 0.16222857, 0.79334067},
    };

    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out = make_float3(0.0, 0.0, 0.0);
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_dwg(rgb2.x), linear_to_dwg(rgb2.y), linear_to_dwg(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
