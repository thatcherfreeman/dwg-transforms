// Written by Thatcher Freeman
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

__DEVICE__ inline void copy_matrix(float src[3][3], float dst[3][3]) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            dst[i][j] = src[i][j];
        }
    }
}

__DEVICE__ float pocket_3_dlogm_to_linear(float x) {
    // Based on clips shot on DJI Pocket 3 in D-Log M
    const float x_shift = -2.137934684753418;
    const float y_shift = 0.7766227126121521;
    const float scale = 5.82949161529541;
    const float slope = 0.016163762658834457;
    const float slope2 = 0.027661778032779694;
    const float intercept = 0.006689354311674833;
    const float cut = 0.5817833542823792;

    float tmp = _powf(2.0, x * scale + y_shift) + x_shift;
    if (tmp < cut) {
        return tmp * slope + intercept;
    } else {
        return tmp * slope2;
    }
}

__DEVICE__ float linear_to_dwg(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(pocket_3_dlogm_to_linear(p_R), pocket_3_dlogm_to_linear(p_G), pocket_3_dlogm_to_linear(p_B));

    // Estimated xyY RGBW Primaries:
    // fitted to a new colorchecker mini
    // rgbw:  [[0.71267977 0.29011508 1.        ]] [[0.22925987 0.68106348 1.        ]] [[ 0.15911944 -0.02917216  1.        ]] [[0.3127
    // 0.329  1.    ]]
    float matrix[3][3] = {
        {0.6880306, 0.17473846, 0.13723094},
        {0.02149547, 0.9315026, 0.04700193},
        {0.05213756, 0.19266248, 0.75519996},
    };

    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out = make_float3(0.0, 0.0, 0.0);
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_dwg(rgb2.x), linear_to_dwg(rgb2.y), linear_to_dwg(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
