// Written by Thatcher Freeman
// clang-format off
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {DI, LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 0, {DWG, NATIVE}, {DaVinci Wide Gamut, Camera Native})

// clang-format on

__DEVICE__ float insta_360_x4_flat_to_linear(float x) {
    // Based on clips shot on Mini 4 Pro, in D-Log M
    // Maps 40% IRE to 18% gray.

    const float x_shift = -2.588409662246704;
    const float y_shift = 1.3655588626861572;
    const float scale = 6.301053524017334;
    const float slope = 1.0434024333953857;
    const float slope2 = 1.8280627727508545;
    const float intercept = 0.03053007647395134;
    const float cut = 0.03890865296125412;
    const float mid_gray_scaling = 0.00807370524853468;

    float tmp = _powf(2.0, x * scale + y_shift) + x_shift;
    float out;
    if (tmp < cut) {
        out = tmp * slope + intercept;
    } else {
        out = tmp * slope2;
    }
    out *= mid_gray_scaling;
    return out;
}

__DEVICE__ float linear_to_di(float x) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    // const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(insta_360_x4_flat_to_linear(p_R), insta_360_x4_flat_to_linear(p_G), insta_360_x4_flat_to_linear(p_B));

    // Just used rec709 primaries
    float matrix[3][3] = {
        {0.562767456007, 0.323516588704, 0.113715955289},
        {0.077754635285, 0.749577346163, 0.172668018552},
        {0.064669199916, 0.191998692046, 0.743332108037},
    };

    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = mv_33_3(matrix, rgb);
    } else if (output_color_gamut == NATIVE) {
        rgb2 = rgb;
    }

    float3 out = make_float3(0.0, 0.0, 0.0);
    if (output_tone_curve == DI) {
        out = make_float3(linear_to_di(rgb2.x), linear_to_di(rgb2.y), linear_to_di(rgb2.z));
    } else if (output_tone_curve == LINEAR) {
        out = rgb2;
    }
    return out;
}
