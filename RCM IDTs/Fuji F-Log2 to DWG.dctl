__DEVICE__ float flog2_to_linear(float t)
{
    const float a = 0.555556f;
    const float b = 0.064829f;
    const float c = 0.245281f;
    const float d = 0.384316f;
    const float e = 8.799461f;
    const float f = 0.092864f;
    const float cut1 = 0.000889f;
    const float cut2 = 0.100686685370811f;

    if (t >= cut2) {
        return ((_exp10f((t - d) / c) - b) / a);
    } else {
        return ((t - f) / e);
    }
}

__DEVICE__ float linear_to_dwg(float x)
{
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f;
    const float log_cut = 0.02740668f;

    if (x > lin_cut) {
        return (_log2f(x + a) + b) * c;
    } else {
        return x * m;
    }
}

// Used values calculated from http://color.support/colorspacecalculator.html
__CONSTANT__ float matrix[9] = {
    0.892112,  0.024369,  0.083519,
    0.032617,  0.786138,  0.181246,
    0.069977,  0.104749,  0.825273,
};

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float r = flog2_to_linear(p_R);
    float g = flog2_to_linear(p_G);
    float b = flog2_to_linear(p_B);

    float r2 = ( matrix[0] * r) + ( matrix[1] * g) + ( matrix[2] * b);
    float g2 = ( matrix[3] * r) + ( matrix[4] * g) + ( matrix[5] * b);
    float b2 = ( matrix[6] * r) + ( matrix[7] * g) + ( matrix[8] * b);

    float r3 = linear_to_dwg(r2);
    float g3 = linear_to_dwg(g2);
    float b3 = linear_to_dwg(b2);

    float3 res = make_float3(r3, g3, b3);
    return res;
}