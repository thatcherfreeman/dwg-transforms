

// Written by Thatcher Freeman
// Based on the jplog2 white paper
// clang-format off
DEFINE_UI_PARAMS(input_tone_curve, Input Transfer Function, DCTLUI_COMBO_BOX, 0, {INPUT_DI, INPUT_LINEAR}, {DaVinci Intermediate, Linear})
DEFINE_UI_PARAMS(output_tone_curve, Output Transfer Function, DCTLUI_COMBO_BOX, 0, {OUTPUT_JPLOG2, OUTPUT_LINEAR}, {JPLog2, Linear})
DEFINE_UI_PARAMS(output_color_gamut, Output Color Gamut, DCTLUI_COMBO_BOX, 1, {DWG, AP1}, {DaVinci Wide Gamut, AP1})

// clang-format on

__DEVICE__ float linear_to_jplog2(float in) {
    const float JPLOG2_LIN_BRKPNT = 0.00680;
    const float JPLOG2_LOG_BRKPNT = 0.16129; /* 10bit cv = 165 */
    const float JPLOG2_LINTOLOG_SLOPE = 10.367739;
    const float JPLOG2_LINTOLOG_YINT = 0.0907775;
    if (in <= JPLOG2_LIN_BRKPNT)
        return JPLOG2_LINTOLOG_SLOPE * in + JPLOG2_LINTOLOG_YINT;
    else /* if (in > JPLOG2_LIN_BRKPNT) */
        return (_log2f(in) + 10.5f) / 20.46f;
}

__DEVICE__ float di_to_linear(float t) {
    const float a = 0.0075f;
    const float b = 7.0f;
    const float c = 0.07329248f;
    const float m = 10.44426855f;
    const float lin_cut = 0.00262409f; // Should be equal to ((cut2 - f) / e)
    const float log_cut = 0.02740668f; // should be equal to (e * cut1 + f)

    if (t > log_cut) {
        return _exp2f((t / c) - b) - a;
    } else {
        return t / m;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb_lin;
    if (input_tone_curve == INPUT_DI) {
        rgb_lin = make_float3(di_to_linear(p_R), di_to_linear(p_G), di_to_linear(p_B));
    } else {
        rgb_lin = make_float3(p_R, p_G, p_B);
    }

    // DWG to AP1 with CAT02 chromatic adaptation
    // Used this calculator: https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix
    float matrix[3][3] = {
        {1.100808130774298, 0.007877619027072, -0.108685749801371},
        {-0.023646220569815, 1.307750994717714, -0.284104774147899},
        {-0.085206273272155, -0.132767913667303, 1.217974186939458},
    };
    float3 rgb2;
    if (output_color_gamut == DWG) {
        rgb2 = rgb_lin;
    } else if (output_color_gamut == AP1) {
        rgb2 = mv_33_3(matrix, rgb_lin);
    }

    float3 out = make_float3(0.0, 0.0, 0.0);
    if (output_tone_curve == OUTPUT_JPLOG2) {
        out = make_float3(linear_to_jplog2(rgb2.x), linear_to_jplog2(rgb2.y), linear_to_jplog2(rgb2.z));
    } else if (output_tone_curve == OUTPUT_LINEAR) {
        out = rgb2;
    }
    return out;
}
